---
swagger: "2.0"
info:
  description: "This is documentation for Python Flask micro-service endpoints"
  version: "1.0.0"
  title: "Swagger IoT data"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "xxx@ut.ee"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "172.17.89.60:8081"
basePath: "/v2"
schemes:
- "http"
paths:
  /upload:
    post:
      tags:
      - "Upload Sensor Data"
      summary: "Upload IoT data to server."
      operationId: "upload_post"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "upfile"
        in: "formData"
        description: "The file to upload."
        required: false
        type: "file"
      responses:
        "200":
          description: "Successfully uploaded"
        "400":
          description: "Bad request"
      x-swagger-router-controller: "swagger_server.controllers.upload_sensor_data_controller"
  /modify:
    put:
      tags:
      - "Modify Sensor Data"
      summary: "Updated Sensor name"
      operationId: "update_sensor_data"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/device"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid Device"
      x-swagger-router-controller: "swagger_server.controllers.modify_sensor_data_controller"
  /sensor_data/{deviceId}:
    get:
      tags:
      - "Query Sensor Data"
      summary: "Find sensor data  by ID"
      description: "Returns a list of sensor data"
      operationId: "get_sensor_by_id"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "Device id to search in the data"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation with json containing all the sensors\
            \ with sensor id"
          schema:
            type: "object"
            properties:
              dev_id:
                type: "integer"
                description: "The user ID."
              device_name:
                type: "string"
                description: "The user name."
              snr:
                type: "integer"
        "400":
          description: "Invalid ID supplied"
      x-swagger-router-controller: "swagger_server.controllers.query_sensor_data_controller"
    delete:
      tags:
      - "Modify Sensor Data"
      summary: "Delete sensor data"
      description: "This can only be done by the logged in user."
      operationId: "delete_sensor_data"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "Sensor Id that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid device id supplied"
      x-swagger-router-controller: "swagger_server.controllers.modify_sensor_data_controller"
  /minimum/{sensor}:
    get:
      tags:
      - "Query Sensor Data"
      summary: "Find minimum sensor data  by ID"
      description: "Returns a list of sensor data"
      operationId: "getminimum"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "sensor"
        in: "path"
        description: "Device id to search in the data"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfull with response containing minimum value"
          schema:
            $ref: "#/definitions/device"
        "400":
          description: "Invalid ID supplied"
      x-swagger-router-controller: "swagger_server.controllers.query_sensor_data_controller"
  /maximum/{sensor}:
    get:
      tags:
      - "Query Sensor Data"
      summary: "Find maximum sensor data  by ID"
      description: "Returns a list of sensor data"
      operationId: "getmaximum"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "sensor"
        in: "path"
        description: "Device id to search in the data"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfull with response containing maximum value"
          schema:
            $ref: "#/definitions/device"
        "400":
          description: "Invalid ID supplied"
      x-swagger-router-controller: "swagger_server.controllers.query_sensor_data_controller"
definitions:
  device:
    type: "object"
    properties:
      dev_id:
        type: "integer"
        format: "int64"
      device_name:
        type: "string"
        example: "puhatu_c1"
    example:
      device_name: "puhatu_c1"
      dev_id: 0
